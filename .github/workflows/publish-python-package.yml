name: Publish Python Package

on:
  push:
    tags:
      - 'replayer-adapter-python-v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version to publish (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          
      - name: Build package
        run: |
          cd replayer-adapter-python
          python -m build
          
      - name: Run tests (if available)
        run: |
          cd replayer-adapter-python
          pip install -e ".[dev]"
          python -m pytest tests/ -v
        continue-on-error: true
          
      # Publish to PyPI
      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/replayer-adapter-python-v')
        run: |
          cd replayer-adapter-python
          python -m twine upload --repository pypi dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
          
      # Prepare package for GitHub Release
      - name: Prepare package for GitHub Release
        if: startsWith(github.ref, 'refs/tags/replayer-adapter-python-v')
        run: |
          cd replayer-adapter-python
          # Create a source distribution if not already created
          if [ ! -d "dist" ]; then
            python -m build
          fi
          # List the built packages
          ls -la dist/
          
      # Manual publish to PyPI
      - name: Manual publish to PyPI
        if: github.event_name == 'workflow_dispatch'
        run: |
          cd replayer-adapter-python
          # Update version in pyproject.toml if provided
          if [ -n "${{ github.event.inputs.version }}" ]; then
            sed -i 's/version = ".*"/version = "${{ github.event.inputs.version }}"/' pyproject.toml
          fi
          python -m build
          python -m twine upload --repository pypi dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
          
      # Manual prepare package for GitHub Release
      - name: Manual prepare package for GitHub Release
        if: github.event_name == 'workflow_dispatch'
        run: |
          cd replayer-adapter-python
          # Update version in pyproject.toml if provided
          if [ -n "${{ github.event.inputs.version }}" ]; then
            sed -i 's/version = ".*"/version = "${{ github.event.inputs.version }}"/' pyproject.toml
          fi
          python -m build
          ls -la dist/
          
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/replayer-adapter-python-v')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## Changes in this release
            
            This release includes updates to the Temporal Workflow Replay Debugger Python replayer adapter.
            
            ### Package: temporal-replayer-adapter-python
            
            - Version: ${{ github.ref_name }}
            - Built from commit: ${{ github.sha }}
            
            ### Installation
            
            #### From PyPI (Recommended)
            ```bash
            pip install temporal-replayer-adapter-python
            ```
            
            #### From GitHub Release
            Download the wheel or source distribution from the release assets below and install:
            ```bash
            pip install temporal_replayer_adapter_python-${{ github.ref_name }}-py3-none-any.whl
            # or
            pip install temporal-replayer-adapter-python-${{ github.ref_name }}.tar.gz
            ```
          draft: false
          prerelease: false
          
      - name: Upload Python Package Assets to Release
        if: startsWith(github.ref, 'refs/tags/replayer-adapter-python-v')
        run: |
          cd replayer-adapter-python
          # Upload all built packages to the release
          for file in dist/*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "Uploading $filename to release..."
              curl -L \
                -X POST \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                -H "Content-Type: application/octet-stream" \
                "${{ steps.create_release.outputs.upload_url }}?name=$filename" \
                --data-binary "@$file"
            fi
          done 